import React, { useState, useEffect } from 'react';
import { Calendar, Download, Filter, ChevronDown } from 'lucide-react';
import { EarningsSummaryCards } from '../components/payouts/EarningsSummaryCards';
import { PayoutsTable } from '../components/payouts/PayoutsTable';
import Toast from '../components/ui/Toast';
import { PayoutFilters, PayoutRecord, EarningsSummary } from '../types';
import { mockPayoutData, getCurrentEarningsSummary } from '../data/payoutData';
import { exportToCSV } from '../utils/export';

const Tracker = () => {
  const [filters, setFilters] = useState<PayoutFilters>({
    dateRange: {
      start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
      end: new Date().toISOString().split('T')[0]
    },
    status: '',
    showRazorpayOnly: false
  });

  const [filteredData, setFilteredData] = useState<PayoutRecord[]>(mockPayoutData);
  const [summary, setSummary] = useState<EarningsSummary>(getCurrentEarningsSummary());
  const [isExporting, setIsExporting] = useState(false);
  const [showToast, setShowToast] = useState(false);
  const [showRazorpayColumn, setShowRazorpayColumn] = useState(false);

  // Filter data based on current filters
  useEffect(() => {
    let filtered = mockPayoutData;

    // Filter by date range
    filtered = filtered.filter(record => {
      const recordDate = new Date(record.month);
      const startDate = new Date(filters.dateRange.start);
      const endDate = new Date(filters.dateRange.end);
      return recordDate >= startDate && recordDate <= endDate;
    });

    // Filter by status
    if (filters.status) {
      filtered = filtered.filter(record => record.payoutStatus === filters.status);
    }

    // Filter by Razorpay
    if (filters.showRazorpayOnly) {
      filtered = filtered.filter(record => record.generatedByRazorpay);
    }

    setFilteredData(filtered);

    // Update summary based on filtered data
    const totalRevenue = filtered.reduce((sum, record) => sum + record.totalRevenue, 0);
    const totalCommission = filtered.reduce((sum, record) => sum + record.commissionEarned, 0);
    
    setSummary({
      totalRevenue,
      totalCommission,
      nextPayoutDate: getCurrentEarningsSummary().nextPayoutDate,
      period: 'for selected period'
    });
  }, [filters]);

  const handleExport = async () => {
    try {
      setIsExporting(true);
      await new Promise(resolve => setTimeout(resolve, 1000)); // Simulate API call
      
      // Convert payout data to CSV format
      const csvData = filteredData.map(record => ({
        Month: new Date(record.month).toLocaleDateString('en-GB', { year: 'numeric', month: 'long' }),
        'Total Revenue (₹)': record.totalRevenue,
        'Commission Rate (%)': record.commissionRate,
        'Commission Earned (₹)': record.commissionEarned,
        'Payout Status': record.payoutStatus,
        'Payout Date': record.payoutDate ? new Date(record.payoutDate).toLocaleDateString('en-GB') : '-',
        'Remarks': record.remarks || '-',
        'Generated by Razorpay': record.generatedByRazorpay ? 'Yes' : 'No',
        'Trend': record.trend
      }));
      
      exportToCSV(csvData, `payouts-report-${new Date().toISOString().split('T')[0]}.csv`);
      setShowToast(true);
      setTimeout(() => setShowToast(false), 3000);
    } catch (error) {
      console.error('Export failed:', error);
      alert('Export failed. Please try again.');
    } finally {
      setIsExporting(false);
    }
  };

  const handleRowClick = (record: PayoutRecord) => {
    console.log('Clicked payout record:', record);
    // You can implement modal or navigation logic here
  };

  const dateRangeOptions = [
    {
      label: 'This Month',
      value: 'thismonth',
      startDate: new Date(new Date().getFullYear(), new Date().getMonth(), 1),
      endDate: new Date()
    },
    {
      label: 'Last Month',
      value: 'lastmonth',
      startDate: new Date(new Date().getFullYear(), new Date().getMonth() - 1, 1),
      endDate: new Date(new Date().getFullYear(), new Date().getMonth(), 0)
    },
    {
      label: 'Last 3 Months',
      value: '3months',
      startDate: new Date(Date.now() - 90 * 24 * 60 * 60 * 1000),
      endDate: new Date()
    },
    {
      label: 'Last 6 Months',
      value: '6months',
      startDate: new Date(Date.now() - 180 * 24 * 60 * 60 * 1000),
      endDate: new Date()
    },
    {
      label: 'Custom',
      value: 'custom',
      startDate: new Date(),
      endDate: new Date()
    }
  ];

  const statusOptions = [
    { label: 'All Status', value: '' },
    { label: 'Paid', value: 'paid' },
    { label: 'Pending', value: 'pending' }
  ];

  return (
    <div className="min-h-screen bg-[#E6F6FB] p-6">
      <div className="max-w-7xl mx-auto">
        {/* Page Header */}
        <div className="bg-white rounded-lg shadow-sm border border-[#E0E0E0] p-6 mb-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-6">
            <div>
              <h1 className="text-2xl font-bold text-[#1E2A3B] mb-1">
                My Earnings & Payouts
              </h1>
              <p className="text-[#666] text-sm">
                Track your commission earnings and payout history
              </p>
            </div>
            
            <div className="flex flex-col sm:flex-row gap-3">
              {/* Date Range Filter */}
              <div className="relative">
                <select
                  className="px-4 py-2 border border-[#E0E0E0] rounded-lg bg-white text-[#1E2A3B] focus:outline-none focus:ring-2 focus:ring-[#00AEEF] focus:border-transparent pr-10"
                  onChange={(e) => {
                    const option = dateRangeOptions.find(opt => opt.value === e.target.value);
                    if (option) {
                      setFilters({
                        ...filters,
                        dateRange: {
                          start: option.startDate.toISOString().split('T')[0],
                          end: option.endDate.toISOString().split('T')[0]
                        }
                      });
                    }
                  }}
                >
                  {dateRangeOptions.map(option => (
                    <option key={option.value} value={option.value}>
                      {option.label}
                    </option>
                  ))}
                </select>
                <Calendar className="absolute right-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-[#666]" />
              </div>

              {/* Export Button */}
              <button
                onClick={handleExport}
                disabled={isExporting || filteredData.length === 0}
                className="inline-flex items-center gap-2 px-4 py-2 bg-[#00AEEF] hover:bg-[#0095D9] active:bg-[#0074B7] text-white font-medium rounded-lg transition-colors duration-200 disabled:opacity-50 disabled:cursor-not-allowed"
              >
                <Download className="h-4 w-4" />
                {isExporting ? 'Exporting...' : 'Export CSV'}
              </button>
            </div>
          </div>

          {/* Additional Filters */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
            {/* Status Filter */}
            <div>
              <label className="block text-sm font-medium text-[#1E2A3B] mb-2">
                Payout Status
              </label>
              <select
                value={filters.status}
                onChange={(e) => setFilters({ ...filters, status: e.target.value })}
                className="w-full px-3 py-2 border border-[#E0E0E0] rounded-lg bg-white text-[#1E2A3B] focus:outline-none focus:ring-2 focus:ring-[#00AEEF] focus:border-transparent"
              >
                {statusOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>

            {/* Razorpay Filter */}
            <div className="flex items-end">
              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={filters.showRazorpayOnly}
                  onChange={(e) => setFilters({ ...filters, showRazorpayOnly: e.target.checked })}
                  className="text-[#00AEEF] focus:ring-[#00AEEF]"
                />
                <span className="text-sm text-[#1E2A3B]">Razorpay transactions only</span>
              </label>
            </div>

            {/* Show Razorpay Column Toggle */}
            <div className="flex items-end">
              <label className="flex items-center gap-2 cursor-pointer">
                <input
                  type="checkbox"
                  checked={showRazorpayColumn}
                  onChange={(e) => setShowRazorpayColumn(e.target.checked)}
                  className="text-[#00AEEF] focus:ring-[#00AEEF]"
                />
                <span className="text-sm text-[#1E2A3B]">Show Razorpay column</span>
              </label>
            </div>
          </div>
        </div>

        {/* Summary Cards */}
        <EarningsSummaryCards summary={summary} />

        {/* Payouts Table */}
        <div className="bg-white rounded-lg shadow-sm border border-[#E0E0E0] p-6">
          <div className="flex items-center justify-between mb-6">
            <h2 className="text-xl font-semibold text-[#1E2A3B]">
              Commission History
            </h2>
            <div className="text-sm text-[#666]">
              {filteredData.length} record{filteredData.length !== 1 ? 's' : ''} found
            </div>
          </div>
          
          <PayoutsTable
            data={filteredData}
            onRowClick={handleRowClick}
            showRazorpayColumn={showRazorpayColumn}
          />
        </div>
      </div>

      {showToast && (
        <Toast
          message="Commission history exported successfully"
          type="success"
          isVisible={showToast}
          onClose={() => setShowToast(false)}
        />
      )}
    </div>
  );
};

export default Tracker;